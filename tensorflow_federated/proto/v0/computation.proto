syntax = "proto3";

package tensorflow_federated.v0;

import "tensorflow/core/framework/tensor_shape.proto";
import "tensorflow/core/framework/types.proto";

// A serializable data structure to represent, store, and exchange federated
// computations. A unit of composition and the lowest and smallest programmable
// abstraction layer that a range of higher-level APIs will be layered upon.
// Structured around the minimum set of concepts and abstractions that provide
// the level of expressiveness. Not intended for consumption by most users.
message Computation {
  // The type signature of this computation. All computations are functions.
  FunctionType type = 1;
}

// A generic representation of an arbitrary type.
message Type {
  oneof type {
    FunctionType function = 1;
    StructureType structure = 2;
    SequenceType sequence = 3;
    TensorType tensor = 4;
  }
}

// A representation of a functional type. Functions must have at most a single
// parameter and a single result. Multiple parameters or results to be modeled
// as compound types (e.g., as structures).
message FunctionType {
  Type parameter = 1;
  Type result = 2;
}

// A representation of a type of a structure. A structure is a compound type,
// similar to a struct in C, that defines a finite set of named members, the
// types of which are known statically. The ordering of members is undefined.
message StructureType {
  map<string, Type> member = 1;
}

// A representation of a type of a sequence. A sequence is a data structure
// that contains multiple elements of the same type that can be accessed only
// in a sequential manner, i.e., through an iterator. For now, we assume that
// a sequence can only be consumed once, i.e., there's no concept of iterator
// reset, as this facilitates high-performance implementations. We may add a
// notion of resettability in the future by introducing additional fields here
// while keeping non-resettability of sequences as the default.
message SequenceType {
  Type element = 1;
}

// A representation of a type of a single tensor in TensorFlow. Aspects such
// as sparseness are not intended to be represented at this level.
message TensorType {
  // Only simple scalar tensor types are currently supported here, i.e., this
  // specifically excludes types such as DT_VARIANT and DT_RESOURCE.
  .tensorflow.DataType dtype = 1;

  // Undefined dimensions are allowed. Defined and undefined dimensions are to
  // be considered distinct for type checking purposes.
  .tensorflow.TensorShapeProto shape = 2;
}
